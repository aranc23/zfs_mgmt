require "thor"
require "zfs_mgmt"
require "zfs_mgmt/restic"
require "zfs_mgmt/zfs_mgr"
require "zfs_mgmt/zfs_mgr/restic"

class ZfsMgr < Thor
  class_option :zfs_binary, :type => :string, :default => 'zfs',
               :desc => 'zfs binary'
  class_option :zpool_binary, :type => :string, :default => 'zpool',
               :desc => 'zpool binary'
  class_option :mbuffer_binary, :type => :string, :default => 'mbuffer',
               :desc => 'mbuffer binary'
  class_option :pv_binary, :type => :string, :default => 'pv',
               :desc => 'pv binary'
  class_option :loglevel, :type => :string, :default => ( $stdout.isatty ? 'info' : 'warn' ),
               :enum => ['debug','error','fatal','info','warn'],
               :desc => 'set logging level to specified severity'
  desc "zfsget [ZFS]", "execute zfs get for the given properties and types and parse the output into a nested hash"
  method_option :properties, :type => :array, :default => ['name'], :desc => "List of properties passed to zfs get"
  method_option :types,      :type => :array, :default => ['filesystem','volume'], enum: ['filesystem','volume','snapshot'], :desc => "list of types"
  def zfsget(zfs)
    ZfsMgmt.set_log_level(options[:loglevel])
    ZfsMgmt.global_options = options
    pp ZfsMgmt.zfsget(properties: options[:properties],
                      types: options[:types],
                      zfs: zfs)
  end
  desc "snapshot SUBCOMMAND ...ARGS", "manage snapshots"
  subcommand "snapshot", ZfsMgmt::ZfsMgr::Snapshot
  desc "list SUBCOMMAND ...ARGS", "list filesystems"
  subcommand "list", ZfsMgmt::ZfsMgr::List
  desc "restic SUBCOMMAND ...ARGS", "backup zfs to restic"
  subcommand "restic", ZfsMgmt::ZfsMgr::Restic
  desc "send SUBCOMMAND ...ARGS", "send zfs"
  subcommand "send", ZfsMgmt::ZfsMgr::Send
end

ZfsMgr.start(ARGV)
